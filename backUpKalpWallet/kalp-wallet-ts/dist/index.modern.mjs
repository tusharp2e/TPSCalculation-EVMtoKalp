import{ethers as r}from"ethers";import{ec as t}from"elliptic";import{KEYUTIL as e,KJUR as n}from"jsrsasign";import{Buffer as o}from"buffer";const a="p256",i="spki",c="hex",s="pkcs8",l="!@#$%^&*+-=",u="ABCDEFGHIJKLMNOPQRSTUVWXYZ",h="abcdefghijklmnopqrstuvwxyz",g="0123456789",w="f5b1aca0717e01d0dbca408d281e9e5145250acb146ff9f0844d53e95aab30b5",y="application/json",p="kalpstagenet",d="prod-test-mainnet",f="intmainnet-mailabs",m="https://dev-userreg-gov.p2eppl.com/v1",E="https://stg-userreg-gov.p2eppl.com/v1",A="https://ngl-userreg-test.kalp.network/v1",b="/pki/register",v="/pki/enrollCsr",S="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",N="sign",I="ECDSA",P="P-256",k="verify",C="https://stg-kalp-gateway.p2eppl.com/transaction/v1",K="https://intmainnet-kalp-gateway.p2eppl.com/transaction/v1",T="https://rpc-mumbai-test.kalp.network/transaction/v1";let O;O="undefined"==typeof window?require("crypto"):window.crypto;const j={Stagenet:"STAGENET",Testnet:"TESTNET",Mainnet:"MAINNET",IntegrationManinet:"INTEGRATIONMAINNET"};async function R(){try{return r.Wallet.createRandom().mnemonic.phrase}catch(r){throw Error("An error occurred while getting seedphrase: "+r)}}async function U(n){try{const o=new t(a),i=r.utils.mnemonicToSeed(n),s=o.keyFromPrivate(i),l=s.getPrivate(c),u=s.getPublic(c),h=e.getKey({curve:"secp256r1",d:l}),g=e.getPEM(h,"PKCS8PRV"),w=await async function(r){try{const t=new Uint8Array(r.length/2);for(let e=0;e<r.length;e+=2)t[e/2]=parseInt(r.substr(e,2),16);const e=await O.subtle.importKey("raw",t,{name:I,namedCurve:P},!0,[k]);return await D(e)}catch(r){throw Error("An error occurred while converting public key hex format to pem"+r)}}(u);return{pemPrivateKey:g,pemPublicKey:w}}catch(r){throw Error("An error occurred while getting keypair:"+r)}}async function D(r){try{const t=await O.subtle.exportKey(i,r),e=await async function(r){try{const t=String.fromCharCode.apply(null,new Uint8Array(r));return`-----BEGIN PUBLIC KEY-----\n${btoa(t)}\n-----END PUBLIC KEY-----\n`}catch(r){throw Error("An error occurred while formatting base64key to pem key"+r)}}(t);return e}catch(r){throw Error("An error occurred while converting publicKey from cryptoKey format to pem: "+r)}}async function Y(){try{var r=await async function(){try{return await window.crypto.subtle.generateKey({name:I,namedCurve:P},!0,[N,k])}catch(r){throw Error("An error occurred while generating key pair from generateKeyPairUsingCryptoSubtle function"+r)}}();const e=r.privateKey,n=r.publicKey;var t=await D(n);return{pemPrivateKey:await async function(r){try{const t=await O.subtle.exportKey(s,r),e=String.fromCharCode.apply(null,new Uint8Array(t));return`-----BEGIN PRIVATE KEY-----\n${btoa(e)}\n-----END PRIVATE KEY-----\n`}catch(r){throw Error("An error occurred in exportPrivateKeyAsPem function :"+r)}}(e),pemPublicKey:t}}catch(r){throw Error("An error occurred while getting public and private key pair:"+r)}}async function B(r){try{var t=r.replace(/-----BEGIN PUBLIC KEY-----\r?\n|\r?\n?-----END PUBLIC KEY-----\r?\n?|\r?\n/g,"");const e=await Q(t),n=await async function(r){try{const t=r.buffer.slice(r.byteOffset,r.byteOffset+r.byteLength),e=await O.subtle.digest("SHA-256",t);return new Uint8Array(e)}catch(r){throw Error("An error occurred while getting hashByteArray"+r)}}(e);return(await async function(r){try{const t=new Uint8Array(2*r.length);for(let e=0;e<r.length;e++){const n=r[e];t[2*e]=n>>4&15,t[2*e+1]=15&n}return Array.from(t).map(r=>r.toString(16)).join("")}catch(r){throw Error("An error occurred in convertByteArrayToString function"+r)}}(n)).slice(-40)}catch(r){throw Error("An error occurred while getting enrollmentId : "+r)}}function J(r,t,e){try{return new n.asn1.csr.CertificationRequest({subject:{str:`/CN=${r}/O=Your Organization/postalCode=Your Postal Code/L=Your Locality/ST=Your Province/C=IN`},sbjpubkey:e,sigalg:"SHA256withECDSA",sbjprvkey:t}).getPEM()}catch(r){throw Error("An error occurred while Creating CSR :"+r)}}function M(r){switch(r){case j.Stagenet:return m;case j.IntegrationManinet:return E;case j.Testnet:return A;default:throw Error("An error occurred while getting network governance url :invalid environment variable passed")}}function x(r){switch(r){case j.Stagenet:return C;case j.IntegrationManinet:return K;case j.Testnet:return T;default:throw Error("An error occurred while getting kalp gateway url :invalid environment variable passed")}}async function L(r,t,e,n,o){try{if(40!==n.length)throw Error("Invalid enrollment ID: Must be 40 characters long.");const a=await V(n),i=t||M(r),c=i+b,s={Authorization:w},l={enrollmentid:n,secret:a,maxenrollments:"-1",channel:e||_(r)},u=await fetch(c,{method:"POST",headers:s,body:JSON.stringify(l)});if(u.ok){const t=i+v,c={Authorization:w},s={enrollmentid:n,secret:a,csr:o,channel:e||_(r)},l=await fetch(t,{method:"POST",headers:c,body:JSON.stringify(s)});if(l.ok)return(await l.json()).response.pubcert;{const r=await l.json(),t=JSON.stringify(r);throw Error("An error occurred while getting certificate"+t)}}{const r=await u.json(),t=JSON.stringify(r);throw Error("An error occurred while doing user registration"+t)}}catch(r){throw Error("An error occurred in user registration process "+r)}}async function G(r,t,e,n,o){try{if(40!==n.length)throw Error("Invalid enrollment ID: Must be 40 characters long.");const a=(t||M(r))+b,i={Authorization:w},c={enrollmentid:n,secret:o,maxenrollments:"-1",channel:e||_(r)},s=await fetch(a,{method:"POST",headers:i,body:JSON.stringify(c)});if(!s.ok){const r=await s.json(),t=JSON.stringify(r);throw Error("An error occurred while doing user registration"+t)}const l=await s.json();return JSON.stringify(l)}catch(r){throw Error("An error occurred while doing user registration"+r)}}async function z(r,t,e,n,o,a){try{const i=(t||M(r))+v,c={Authorization:w},s={enrollmentid:n,secret:o,csr:a,channel:e||_(r)},l=await fetch(i,{method:"POST",headers:c,body:JSON.stringify(s)});if(l.ok)return(await l.json()).response.pubcert;{const r=await l.json(),t=JSON.stringify(r);throw Error("An error occurred while getting certificate"+t)}}catch(r){throw Error("An error occurred while getting certificate"+r)}}async function V(r){try{const t=(new TextEncoder).encode(r),e=await O.subtle.digest("SHA-256",t),n=Array.from(new Uint8Array(e)).map(r=>r.toString(16).padStart(2,"0")).join(""),o=u,a=h,i=l,c=g,s=o+a+i+c;function w(r,t){const e=parseInt(r.slice(2*t,2*t+2),16)%s.length;return s[e]}let y="";y+=o[parseInt(n.slice(0,2),16)%o.length],y+=a[parseInt(n.slice(2,4),16)%a.length],y+=i[parseInt(n.slice(4,6),16)%i.length],y+=c[parseInt(n.slice(6,8),16)%c.length];for(let p=4;p<16;p++)y+=w(n,p);return y}catch(d){throw Error("An error occurred while getting secret from enrollment ID "+d)}}async function $(r,t,e,n,o,a,i,c,s){try{console.log("transaction 123",r,t,e,n,o,a,i,c,s);const g=t||x(r),w=g+"/proposal",y=g+"/endorse",p=g+"/submit",d=g+"/commitstatus",f=n,m={enrollmentID:e,cert:o,channelName:a,chainCodeName:i,transactionName:c,transactionParams:s};console.log("transaction",m);var l=await W(w,m),u="",h="";const E=l.message.proposal,A=await Q(E);[u,h]=await X(f,A);const b={signedR:u,signedS:h,proposal:E},v=(await W(y,b)).message.endorse,S=await Q(v);[u,h]=await X(f,S);const N={signedR:u,signedS:h,endorse:v},I=(await W(p,N)).message.submit,P=await Q(I);[u,h]=await X(f,P);const k={signedR:u,signedS:h,submit:I};return(await W(d,k)).message.transaction_id}catch(r){throw Error("An error occurred while submiting transaction "+r)}}async function H(r,t,e,n,o,a,i,c,s){try{const l=t||x(r),u=l+"/proposal",h=l+"/evaluate",g={enrollmentID:e,cert:o,channelName:a,chainCodeName:i,transactionName:c,transactionParams:s};return await F(n,u,h,g)}catch(r){throw Error("An error occurred while evaluating transaction :"+r)}}const q=async(r,t,e,n,o,a,i,c,s)=>{try{const l=t||x(r),u=l+"/proposal",h=l+"/evaluate",g={enrollmentID:e,cert:o,channelName:a,chainCodeName:i,transactionName:c,transactionParams:s};return await F(n,u,h,g)}catch(r){throw Error("An error occurred while getting balance :"+r)}};async function F(r,t,e,n){try{var o=await W(t,n),a="",i="";const c=o.message.proposal,s=await Q(c);[a,i]=await X(r,s);const l={signedR:a,signedS:i,proposal:c};return(await W(e,l)).message.evaluate}catch(r){throw Error("An error occurred while evaluateSignedTransaction :"+r)}}async function W(r,t){try{const e=await fetch(r,{method:"POST",headers:{"Content-Type":y},body:JSON.stringify(t)}),n=await e.json();if(e.ok)return n;if(null!==n)throw Error(`An error occurred while pinging url: ${r},  message: ${JSON.stringify(n)}`);throw Error(`An error occurred while pinging url: ${r}`)}catch(r){throw Error("An error occurred in restCall :"+r)}}async function Q(r){try{const t=S,e={};for(let r=0;r<t.length;r++)e[t[r]]=r;e["="]=0;const n=new Uint8Array(r.length);let o=0;for(let t=0;t<r.length;t+=4){const a=e[r[t+1]],i=e[r[t+2]],c=e[r[t+3]];n[o]=e[r[t]]<<2|a>>4,o++,"="!==r[t+2]&&(n[o]=a<<4|i>>2,o++),"="!==r[t+3]&&(n[o]=i<<6|c,o++)}return n.slice(0,o)}catch(r){throw Error("An error occurred in decodeBase64String function:"+r)}}async function X(r,n){try{const{prvKeyHex:i}=e.getKey(r),s=new t(a),l=s.keyFromPrivate(i,c),u=s.sign(o.from(n),l);return[u.r.toString(),u.s.toString()]}catch(r){throw Error("An error occurred in signUsingElliptic function:"+r)}}async function Z(r,t){try{const o=await async function(r){try{const t=r.replace("-----BEGIN PRIVATE KEY-----","").replace("-----END PRIVATE KEY-----",""),e=atob(t),n=new Uint8Array(e.length);for(let r=0;r<e.length;r++)n[r]=e.charCodeAt(r);const o=n.buffer;return await O.subtle.importKey(s,o,{name:I,namedCurve:P},!0,[N])}catch(r){throw Error("An error occurred in importPrivateKey function :"+r)}}(r);var e="",n="";const a=await Q(t);return[e,n]=await X(o,a),[e,n]}catch(r){throw Error("An error occurred while getting R and S value :"+r)}}function _(r){try{switch(r){case j.IntegrationManinet:return f;case j.Stagenet:return p;case j.Testnet:return d;default:throw Error("An error occurred while getting kalp gateway url :invalid environment variable passed")}}catch(r){throw r}}export{j as Network,J as createCsr,z as enrollCsr,q as evaluateBalance,H as evaluateTransaction,B as getEnrollmentId,Y as getKeyPair,U as getKeyPairFromSeedPhrase,Z as getRandSvalue,V as getSecret,R as getSeedPhrase,G as register,L as registerAndEnrollUser,X as signUsingElliptic,$ as submitTransaction};
